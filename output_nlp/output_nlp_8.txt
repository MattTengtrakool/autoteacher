Modify your code as follows:code: int  main ( void )  {  const  int  n  =  3 ;for  ( int  i  =  0 ;i  <  n ;i ++ )  {  for  ( int  j  =  0 ;j  <  n ;j ++ )  {  printf ( "#" );}  printf ( " \n " );}  Notice how code: n is now a constant. It can never be changed.-  As illustrated earlier in this lecture, we can make our code prompt the user for the size of the grid. Modify your code as follows:code: #include  <cs50.h> #include  <stdio.h>   int  main ( void )  {  int  n  =  get_int ( "Size: " );for  ( int  i  =  0 ;i  <  n ;i ++ )  {  for  ( int  j  =  0 ;j  <  n ;j ++ )  {  printf ( "#" );}  printf ( " \n " );}  }  Notice that code: get_int is used to prompt the user.-  A general piece of advice within programming is that you should never fully trust your user. They will likely misbehave, typing incorrect values where they should not. We can protect our program from bad behavior by checking to make sure the user’s input satisfies our needs. Modify your code as follows:code: #include  <cs50.h> #include  <stdio.h>   int  main ( void )  {  int  n ;do  {  n  =  get_int ( "Size: " );}  while  ( n  <  1 );for  ( int  i  =  0 ;i  <  n ;i ++ )  {  for  ( int  j  =  0 ;j  <  n ;j ++ )  {  printf ( "#" );}  printf ( " \n " );}  }  Notice how the user is continuously prompted for the size until the user’s input is 1 or greater.## Comments  - Comments are fundamental parts of a computer program, where you leave explanatory remarks to yourself and others that may be collaborating with you regarding your code.- All code you create for this course must include robust comments.- Typically each comment is a few words or more, providing the reader an opportunity to understand what is happening in a specific block of code. Further, such comments serve as a reminder for you later when you need to revise your code.-  Comments involve placing code: // into your code, followed by a comment. 