Modify your code as follows to integrate comments:code: #include  <cs50.h> #include  <stdio.h>   int  main ( void )  {  // Get size of grid  int  n ;do  {  n  =  get_int ( "Size: " );}  while  ( n  <  1 );// Print grid of bricks  for  ( int  i  =  0 ;i  <  n ;i ++ )  {  for  ( int  j  =  0 ;j  <  n ;j ++ )  {  printf ( "#" );}  printf ( " \n " );}  }  Notice how each comment begins with a code: // .## Abstraction  - Abstraction is the art of simplifying our code such that it deals with smaller and smaller problems.- Looking at your code, you can see how two essential problems in our code are get size of grid and print grid of bricks .-  We can abstract away these two problems into separate functions. Modify your code as follows:code: #include  <cs50.h> #include  <stdio.h>   int  get_size ( void );void  print_grid ( int  n );int  main ( void )  {  int  n  =  get_size ();print_grid ( n );}  int  get_size ( void )  {  int  n ;do  {  n  =  get_int ( "Size: " );}  while  ( n  <  1 );return  n ;}  void  print_grid ( int  n )  {  for  ( int  i  =  0 ;i  <  n ;i ++ )  {  for  ( int  j  =  0 ;j  <  n ;j ++ )  {  printf ( "#" );}  printf ( " \n " );}  }  Notice that we have three functions now. First, we have the code: main function that calls two other functions called code: get_size and code: print_grid . Second, we have a second function called code: get_size which includes the exact code we had to accomplish this task prior. Third, we have another function called code: print_grid that prints the grid. Because we abstracted away the essential problems within our program, our code: main function is very short.## Operators and Types  -  Operators refer to the mathematical operations that are supported by your compiler. In C, these mathematical operators include:- code: + for addition  - code: - for subtraction  - code: * for multiplication  - code: / for division  - code: % for remainder  - Types refer to the possible data that can be stored within a variable. 